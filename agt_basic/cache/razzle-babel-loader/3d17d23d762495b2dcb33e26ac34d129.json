{"ast":null,"code":"import CONST from '../../consts';\n/**\n * The following method is for server side . \n * googleSignInSvr is meant to be used in place of googleSignIn.\n * \n */\n\nexport var googleSignInSvr = function googleSignInSvr() {\n  location.href = \"/oauth/gauth\";\n};\n/**\n * The following method is for server side retrieval of code, id token and \n * access token. getEmailUserSvr is meant to be used in place of getEmailUser.\n * \n */\n\nexport var getEmailUserSvr = function getEmailUserSvr(accesstoken) {\n  if (accesstoken) {\n    var uri = CONST.GAUTH_USER_EP; //   const uri = \"https://www.googleapis.com/userinfo/v2/me\";\n\n    var url = new URL(uri);\n    var headers = new Headers({\n      //'Authorization': 'Bearer ' + params['access_token'],\n      'Authorization': 'Bearer ' + accesstoken,\n      //    'Authorization': 'Bearer ' + 'ya29.Il_ABz1maps1ttHy1f9YlRj6FMfkvlEr1T0qa062Z1976NhfWJPoLPL9SljDL1xCj1RDJBIrkxsOXNfChkbiyoEZHHOWEjNq1TEELIpcqlF02K6wYTUdQ9gviuRQWjroQw',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json' //  'Content-length':0\n\n    });\n    var reqOpts = {\n      method: 'GET',\n      headers: headers\n    };\n    var req = new Request(url, reqOpts);\n    return fetch(req).then(function (res) {\n      if (res.ok) {\n        return res.json();\n      }\n    });\n  } else {\n    throw [1, Error(\"No access token\")];\n  }\n};\n/* export const googleSignIn = () => {\n  console.log('Calling outhsignin: ');\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  //  var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n\n  // Create element to open OAuth 2.0 endpoint in new window.\n  var form = document.createElement('form');\n  form.setAttribute('method', 'GET'); // Send as a GET request.\n  form.setAttribute('action', CONST.GAUTH_URI);\n  //form.setAttribute('action', oauth2Endpoint);\n\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    'client_id': CONST.GCLIENT_ID,\n    'redirect_uri': CONST.GAUTH_REDIRECT_URI,\n    //  'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'scope': 'openid profile email',\n    //scope: 'https://www.googleapis.com/auth/gmail.metadata',\n    'state': 'hgillrequest',\n    'include_granted_scopes': 'true',\n    'response_type': 'token',\n\n    // 'response_type': 'code'\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement('input');\n    input.setAttribute('type', 'hidden');\n    input.setAttribute('name', p);\n    input.setAttribute('value', params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n}\n */\n\n/*  \nexport const processGToken = (location) => {\n  if (location.hash && (typeof location.hash !== 'undefined') && location.hash !== \"\") {\n\n\n    const fragmentString = location.hash.substring(1);\n    //  console.log('Fragment string is :' + fragmentString);\n    const params = {};\n    const regex = /([^&=]+)=([^&]*)/gm;\n    // let m = regex.exec(fragmentString);\n    // let i = 0;\n\n    // if (m) {\n    let m = 0;\n    while (m = regex.exec(fragmentString)) {\n      params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n    }\n    // console.log('Tokenized params is :'+ JSON.stringify(params));\n    if (Object.keys(params).length > 0) {\n      if (localStorage) {\n        localStorage.setItem('google_oauth2', JSON.stringify(params));\n\n        //  if (params['state'] && params['state'] == 'try_sample_request') {\n\n       //   getEmailUser()\n       //  .then(res=>{\n       //    console.log(\"ID is : \"+ JSON.stringify(res));\n//\n  //       }); \n        //  console.log(\"token from storge:: \" + localStorage.getItem('oauth2-test-params'));\n        //  }\n      }\n    }\n  } else {\n    console.log(\"Location has is empty:\")\n  }\n}\n */\n\n/* export const getEmailUser = () => {\n  const params = JSON.parse(localStorage.getItem('googleToken'));\n  if (params && params['access_token']) {\n    console.log('G Access token: ' + params['access_token']);\n    //const uri = \"https://www.googleapis.com/oauth2/v2/userinfo\";\n    const uri = CONST.GAUTH_USER_EP;\n    //   const uri = \"https://www.googleapis.com/userinfo/v2/me\";\n    const url = new URL(uri);\n    //  url.search = new URLSearchParams({\n    //   'key': 'AIzaSyBRiifSe51iNAkMaVrk1nU-0miaU_iuXUU',\n    // }); \n    const headers = new Headers({\n      'Authorization': 'Bearer ' + params['access_token'],\n      //    'Authorization': 'Bearer ' + 'ya29.Il_ABz1maps1ttHy1f9YlRj6FMfkvlEr1T0qa062Z1976NhfWJPoLPL9SljDL1xCj1RDJBIrkxsOXNfChkbiyoEZHHOWEjNq1TEELIpcqlF02K6wYTUdQ9gviuRQWjroQw',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      //  'Content-length':0\n    });\n    const reqOpts = {\n      method: 'GET',\n      headers: headers,\n    };\n\n    const req = new Request(url, reqOpts);\n\n    return fetch(req)\n      .then(res => {\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          oauth2SignIn();\n        }\n\n      });\n  }\n} */","map":{"version":3,"sources":["/home/azure/spaces/reactapps/agt_basic/src/app/data/auth/googleauth.js"],"names":["CONST","googleSignInSvr","location","href","getEmailUserSvr","accesstoken","uri","GAUTH_USER_EP","url","URL","headers","Headers","reqOpts","method","req","Request","fetch","then","res","ok","json","Error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACjCC,EAAAA,QAAQ,CAACC,IAAT,GAAgB,cAAhB;AACD,CAFI;AAIL;AACF;AACA;AACA;AACA;;AAIE,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AAE9C,MAAIA,WAAJ,EAAiB;AACf,QAAMC,GAAG,GAAGN,KAAK,CAACO,aAAlB,CADe,CAEf;;AACA,QAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAZ;AACA,QAAMI,OAAO,GAAG,IAAIC,OAAJ,CAAY;AAC1B;AACA,uBAAiB,YAAYN,WAFH;AAG1B;AACA,gBAAU,kBAJgB;AAK1B,sBAAgB,kBALU,CAM1B;;AAN0B,KAAZ,CAAhB;AAQA,QAAMO,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,KADM;AAEdH,MAAAA,OAAO,EAAEA;AAFK,KAAhB;AAKA,QAAMI,GAAG,GAAG,IAAIC,OAAJ,CAAYP,GAAZ,EAAiBI,OAAjB,CAAZ;AACA,WAAOI,KAAK,CAACF,GAAD,CAAL,CACJG,IADI,CACC,UAAAC,GAAG,EAAI;AACX,UAAIA,GAAG,CAACC,EAAR,EAAY;AACV,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,KALI,CAAP;AAOD,GAzBD,MAyBK;AACH,UAAM,CAAC,CAAD,EAAGC,KAAK,CAAC,iBAAD,CAAR,CAAN;AACD;AAEF,CA/BM;AAksourcesContent":["import CONST from '../../consts';\n\n/**\n * The following method is for server side . \n * googleSignInSvr is meant to be used in place of googleSignIn.\n * \n */\nexport const googleSignInSvr = () => {\n    location.href = \"/oauth/gauth\";\n  }\n  \n  /**\n   * The following method is for server side retrieval of code, id token and \n   * access token. getEmailUserSvr is meant to be used in place of getEmailUser.\n   * \n   */\n  \n  \n  \n  export const getEmailUserSvr = (accesstoken) => {\n  \n    if (accesstoken) {\n      const uri = CONST.GAUTH_USER_EP;\n      //   const uri = \"https://www.googleapis.com/userinfo/v2/me\";\n      const url = new URL(uri);\n      const headers = new Headers({\n        //'Authorization': 'Bearer ' + params['access_token'],\n        'Authorization': 'Bearer ' + accesstoken,\n        //    'Authorization': 'Bearer ' + 'ya29.Il_ABz1maps1ttHy1f9YlRj6FMfkvlEr1T0qa062Z1976NhfWJPoLPL9SljDL1xCj1RDJBIrkxsOXNfChkbiyoEZHHOWEjNq1TEELIpcqlF02K6wYTUdQ9gviuRQWjroQw',\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        //  'Content-length':0\n      });\n      const reqOpts = {\n        method: 'GET',\n        headers: headers,\n      };\n  \n      const req = new Request(url, reqOpts);\n      return fetch(req)\n        .then(res => {\n          if (res.ok) {\n            return res.json();\n          }\n        });\n  \n    }else{\n      throw [1,Error(\"No access token\")];\n    }\n  \n  }\n  \n\n/* export const googleSignIn = () => {\n  console.log('Calling outhsignin: ');\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  //  var oauth2Endpoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n\n  // Create element to open OAuth 2.0 endpoint in new window.\n  var form = document.createElement('form');\n  form.setAttribute('method', 'GET'); // Send as a GET request.\n  form.setAttribute('action', CONST.GAUTH_URI);\n  //form.setAttribute('action', oauth2Endpoint);\n\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    'client_id': CONST.GCLIENT_ID,\n    'redirect_uri': CONST.GAUTH_REDIRECT_URI,\n    //  'scope': 'https://www.googleapis.com/auth/drive.metadata.readonly',\n    'scope': 'openid profile email',\n    //scope: 'https://www.googleapis.com/auth/gmail.metadata',\n    'state': 'hgillrequest',\n    'include_granted_scopes': 'true',\n    'response_type': 'token',\n\n    // 'response_type': 'code'\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement('input');\n    input.setAttribute('type', 'hidden');\n    input.setAttribute('name', p);\n    input.setAttribute('value', params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n}\n */\n\n/*  \nexport const processGToken = (location) => {\n  if (location.hash && (typeof location.hash !== 'undefined') && location.hash !== \"\") {\n\n\n    const fragmentString = location.hash.substring(1);\n    //  console.log('Fragment string is :' + fragmentString);\n    const params = {};\n    const regex = /([^&=]+)=([^&]*)/gm;\n    // let m = regex.exec(fragmentString);\n    // let i = 0;\n\n    // if (m) {\n    let m = 0;\n    while (m = regex.exec(fragmentString)) {\n      params[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n    }\n    // console.log('Tokenized params is :'+ JSON.stringify(params));\n    if (Object.keys(params).length > 0) {\n      if (localStorage) {\n        localStorage.setItem('google_oauth2', JSON.stringify(params));\n\n        //  if (params['state'] && params['state'] == 'try_sample_request') {\n\n       //   getEmailUser()\n       //  .then(res=>{\n       //    console.log(\"ID is : \"+ JSON.stringify(res));\n//\n  //       }); \n        //  console.log(\"token from storge:: \" + localStorage.getItem('oauth2-test-params'));\n        //  }\n      }\n    }\n  } else {\n    console.log(\"Location has is empty:\")\n  }\n}\n */\n\n/* export const getEmailUser = () => {\n  const params = JSON.parse(localStorage.getItem('googleToken'));\n  if (params && params['access_token']) {\n    console.log('G Access token: ' + params['access_token']);\n    //const uri = \"https://www.googleapis.com/oauth2/v2/userinfo\";\n    const uri = CONST.GAUTH_USER_EP;\n    //   const uri = \"https://www.googleapis.com/userinfo/v2/me\";\n    const url = new URL(uri);\n    //  url.search = new URLSearchParams({\n    //   'key': 'AIzaSyBRiifSe51iNAkMaVrk1nU-0miaU_iuXUU',\n    // }); \n    const headers = new Headers({\n      'Authorization': 'Bearer ' + params['access_token'],\n      //    'Authorization': 'Bearer ' + 'ya29.Il_ABz1maps1ttHy1f9YlRj6FMfkvlEr1T0qa062Z1976NhfWJPoLPL9SljDL1xCj1RDJBIrkxsOXNfChkbiyoEZHHOWEjNq1TEELIpcqlF02K6wYTUdQ9gviuRQWjroQw',\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      //  'Content-length':0\n    });\n    const reqOpts = {\n      method: 'GET',\n      headers: headers,\n    };\n\n    const req = new Request(url, reqOpts);\n\n    return fetch(req)\n      .then(res => {\n\n        if (res.ok) {\n          return res.json();\n        } else {\n          oauth2SignIn();\n        }\n\n      });\n  }\n} */\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}