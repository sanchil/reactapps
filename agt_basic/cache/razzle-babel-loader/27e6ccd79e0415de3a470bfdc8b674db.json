{"ast":null,"code":"import { session } from '../index'; //import uuidv4 from 'uuid/v4';\n\nimport { v4 as uuidv4 } from 'uuid'; //import * as blobUtil from 'blob-util';\n\nimport CONST from '../../consts';\nimport { parseRedisResponseToObj } from '../../lib/utils';\nexport var createSession = function createSession(data) {\n  data.uid = data._id;\n  data._id = 'SESSION';\n  data.sessid = 'SESSION_' + uuidv4();\n  /* \n       return deleteSession()\n          .then(doc => doc)\n          .catch(err => {\n              console.log('deletion err:'+err.message)\n              return {};\n          })\n          .then(res => {\n              console.log(\"Session deletion :: adding a new session\" + JSON.stringify(res));\n              return session.put(data);\n          });\n   */\n};\nexport var getSession = function getSession() {\n  return session.get('SESSION', {\n    latest: true,\n    conflicts: true\n  });\n};\nexport var deleteSession = function deleteSession() {\n  return getSession().then(function (sess) {\n    console.log('getSession: found session: ' + JSON.stringify(sess));\n    return sess;\n  })[\"catch\"](function (err) {\n    console.log('getSession: session not found: ' + err.message);\n    return session.remove('SESSION', {\n      latest: true\n    });\n  });\n};\nexport var createRedisSession = function createRedisSession(user, sessdata) {\n  //   data.uid = data._id;\n  //   data._id = 'SESSION';\n  //   data.sessid = 'SESSION_' + uuidv4();\n  var sessid = 'SESSION_' + user._id;\n  var data = {};\n  data['sessdata'] = sessdata;\n  data['uid'] = user; // console.log('REDIS Session :: >> ' + JSON.stringify(data));\n  // # GET /set?key=one&val=first%20value\n  //# GET /get?key=some_key\n\n  var uri = CONST.SESSIONURL + '/set'; //  const req = new Request(uri);\n\n  var url = new URL(uri);\n  url.search = new URLSearchParams({\n    key: sessid,\n    val: \"\".concat(JSON.stringify(data))\n  }).toString();\n  console.log('Session SET URL is: ' + JSON.stringify(url));\n  var req = new Request(url);\n  return fetch(req).then(function (res) {\n    console.log(\"FETCH SET response is : \" + res.status);\n\n    if (res.ok) {\n      return res.text();\n    } else {\n      console.log(\"FETCH SET response is not ok: \");\n      return {};\n    }\n  });\n};\nexport var getRedisSession = function getRedisSession(sessid) {\n  // const sessid = 'SESSION_' + docid;\n  var uri = CONST.SESSIONURL + '/get';\n  var url = new URL(uri);\n  url.search = new URLSearchParams({\n    key: sessid\n  });\n  var req = new Request(url);\n  console.log('Session GET URL is: ' + JSON.stringify(url));\n  return fetch(url).then(function (res) {\n    if (res.ok) {\n      console.log('REDIS GET response is:: ' + res.status);\n      return res.text();\n    } else {\n      console.log(\"FETCH GET response is not ok: \");\n      return {};\n    }\n  }).then(function (res) {\n    return JSON.parse(parseRedisResponseToObj(res));\n  });\n  /*   .then(res =>{\n      console.log(\"REis session object is __ 0 \"+ parseRedisResponseToObj(res));\n      JSON.parse(parseRedisResponseToObj(res))\n  } );  */\n};\nexport var deleteRedisSession = function deleteRedisSession(sessid) {\n  //   const sessid = 'SESSION_' + data._id;\n  var uri = CONST.SESSIONURL + '/del';\n  var url = new URL(uri);\n  url.search = new URLSearchParams({\n    key: sessid\n  }).toString();\n  var req = new Request(url);\n  return fetch(req).then(function (res) {\n    if (res.ok) {\n      console.log('REDIS DELETE response is:: ' + res.status);\n      return res.text();\n    } else {\n      return {};\n    }\n  }).then(function (res) {\n    return res;\n  });\n};\nexport default {\n  getSession: getSession,\n  deleteSession: deleteSession,\n  createSession: createSession,\n  createRedisSession: createRedisSession,\n  getRedisSession: getRedisSession,\n  deleteRedisSession: deleteRedisSession\n};","map":{"version":3,"sources":["/home/azure/spaces/reactapps/agt_basic/src/app/data/session/sessionquery.js"],"names":["session","v4","uuidv4","CONST","parseRedisResponseToObj","createSession","data","uid","_id","sessid","getSession","get","latest","conflicts","deleteSession","then","sess","console","log","JSON","stringify","err","message","remove","createRedisSession","user","sessdata","uri","SESSIONURL","url","URL","search","URLSearchParams","key","val","toString","req","Request","fetch","res","status","ok","text","getRedisSession","parse","deleteRedisSession"],"mappings":"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","sourcesContent":["import { session } from '../index';\n//import uuidv4 from 'uuid/v4';\nimport { v4 as uuidv4 } from 'uuid';\n//import * as blobUtil from 'blob-util';\nimport CONST from '../../consts';\nimport { parseRedisResponseToObj } from '../../lib/utils';\n\nexport const createSession = (data) => {\n\n    data.uid = data._id;\n    data._id = 'SESSION';\n    data.sessid = 'SESSION_' + uuidv4();\n\n \n\n/* \n     return deleteSession()\n        .then(doc => doc)\n        .catch(err => {\n            console.log('deletion err:'+err.message)\n            return {};\n        })\n        .then(res => {\n            console.log(\"Session deletion :: adding a new session\" + JSON.stringify(res));\n            return session.put(data);\n        });\n */\n}\n\nexport const getSession = () => {\n    return session.get('SESSION', { latest: true , conflicts:true});\n}\n\nexport const deleteSession = () => {\n    return getSession()\n        .then(sess => {\n            console.log('getSession: found session: '+JSON.stringify(sess));\n            return sess;\n        })\n        .catch(err => {\n            console.log('getSession: session not found: ' + err.message)\n            return session.remove('SESSION', { latest: true });\n        })\n\n}\n\n\nexport const createRedisSession = (user, sessdata) => {\n\n    //   data.uid = data._id;\n    //   data._id = 'SESSION';\n    //   data.sessid = 'SESSION_' + uuidv4();\n\n    const sessid = 'SESSION_' + user._id;\n    const data = {};\n\n    data['sessdata'] = sessdata;\n    data['uid'] = user;\n    // console.log('REDIS Session :: >> ' + JSON.stringify(data));\n\n\n    // # GET /set?key=one&val=first%20value\n    //# GET /get?key=some_key\n\n    const uri = CONST.SESSIONURL + '/set';\n    //  const req = new Request(uri);\n    const url = new URL(uri);\n\n    url.search = new URLSearchParams({ key: sessid, val: `${JSON.stringify(data)}` }).toString();\n\n    console.log('Session SET URL is: ' + JSON.stringify(url));\n\n\n    const req = new Request(url);\n\n\n\n    return fetch(req)\n        .then(res => {\n            console.log(\"FETCH SET response is : \" + res.status);\n            if (res.ok) {\n                return res.text();\n            } else {\n                console.log(\"FETCH SET response is not ok: \");\n                return {}\n            }\n        })\n}\n\n\nexport const getRedisSession = (sessid) => {\n\n   // const sessid = 'SESSION_' + docid;\n\n    const uri = CONST.SESSIONURL + '/get';\n    const url = new URL(uri);\n    url.search = new URLSearchParams({ key: sessid });\n\n    const req = new Request(url);\n\n    console.log('Session GET URL is: ' + JSON.stringify(url));\n\n    return fetch(url)\n        .then(res => {\n            if (res.ok) {\n                console.log('REDIS GET response is:: ' + res.status);\n                return res.text();\n            } else {\n                console.log(\"FETCH GET response is not ok: \");\n                return {}\n            }\n        })\n        .then(res => JSON.parse(parseRedisResponseToObj(res)));\n        /*   .then(res =>{\n            console.log(\"REis session object is __ 0 \"+ parseRedisResponseToObj(res));\n            JSON.parse(parseRedisResponseToObj(res))\n    } );  */ \n       \n\n}\n\nexport const deleteRedisSession = (sessid) => {\n\n    //   const sessid = 'SESSION_' + data._id;\n\n    const uri = CONST.SESSIONURL + '/del';\n    const url = new URL(uri);\n    url.search = new URLSearchParams({ key: sessid }).toString();\n    const req = new Request(url);\n\n\n    return fetch(req)\n        .then(res => {\n\n            if (res.ok) {\n                console.log('REDIS DELETE response is:: ' + res.status);\n                return res.text();\n            } else {\n                return {}\n            }\n        })\n        .then(res => res);\n\n\n}\n\nexport default {\n    getSession,\n    deleteSession,\n    createSession,\n    createRedisSession,\n    getRedisSession,\n    deleteRedisSession\n}"]},"metadata":{},"sourceType":"module"}