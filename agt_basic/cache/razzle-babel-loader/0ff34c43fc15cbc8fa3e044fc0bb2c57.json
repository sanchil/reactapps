{"ast":null,"code":"import CONST from '../../consts';\n\n/**\n * \n * The following code is for logging into fb using http urls and without the \n * provide javascript code by FB.\n * \n */\nexport const fbSignIn = () => {\n  const form = document.createElement('form');\n  form.setAttribute('method', 'GET'); // Send as a GET request.\n\n  form.setAttribute('action', CONST.FBAUTH_URI);\n  const params = {\n    client_id: CONST.FBAPP_ID,\n    redirect_uri: CONST.FBAUTH_REDIRECT_URI,\n    response_type: 'code token granted_scopes',\n    scope: 'public_profile email user_birthday user_location',\n    state: {\n      'name': 'hgillauth'\n    }\n  };\n\n  for (let p in params) {\n    let inp = document.createElement('input');\n    inp.setAttribute('type', 'hidden');\n    inp.setAttribute('name', p);\n    inp.setAttribute('value', params[p]);\n    form.appendChild(inp);\n  }\n\n  document.body.appendChild(form);\n  form.submit();\n};\nexport const getFBAccessToken = location => {\n  //const urlFragment = location.search.substring(1);\n  const urlFragment = location.hash.substring(1);\n  const codeparams = {};\n  const regex = /([^&=]+)=([^&]*)/gm;\n  let m = 0;\n\n  while (m = regex.exec(urlFragment)) {\n    codeparams[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  } //console.log('fb code: ' + codeparams['code']);\n\n\n  if (codeparams['access_token'] && typeof codeparams['access_token'] !== 'undefined' && codeparams['access_token'].length !== \"\") {\n    //  console.log('Access token: ' + JSON.stringify(codeparams));\n    localStorage.setItem('fb_accesstoken', JSON.stringify(codeparams)); //  return sendFBCode4Token(codeparams['code']);\n\n    /*  return getLongLivedFBAccessToken(codeparams['access_token'])\n    .then(res=>{\n      if(res.ok){\n        return res.json();       \n      }else{\n        return {}\n      }\n    })\n    .then(res=>{\n      //console.log('RES::'+JSON.stringify(res));\n      localStorage.setItem('fb_accesstoken_long', JSON.stringify(res));\n    });  */\n  }\n};\nexport const getLongLivedFBAccessToken = token => {\n  //const uri = 'https://graph.facebook.com/oauth/access_token';\n  const uri = CONST.FBACCESS_TOKEN_URI;\n  const url = new URL(uri);\n  url.search = new URLSearchParams({\n    grant_type: 'fb_exchange_token',\n    client_id: '607534493419952',\n    client_secret: 'e8e1802f31bea78928b6bbffcaa0368b',\n    fb_exchange_token: token\n  });\n  const headers = new Headers({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  });\n  const reqOpts = {\n    method: 'GET' //   headers:headers\n\n  };\n  const req = new Request(url, reqOpts);\n  return fetch(req);\n};\nexport const getFBAccessTokenFromCode = location => {\n  // const urlFragment = location.search.substring(1);\n  const urlFragment = location.hash.substring(1);\n  const codeparams = {};\n  const regex = /([^&=]+)=([^&]*)/gm;\n  let m = 0;\n\n  while (m = regex.exec(urlFragment)) {\n    codeparams[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  } //console.log('fb code: ' + codeparams['code']);\n\n\n  if (codeparams['code'] && typeof codeparams['code'] !== 'undefined' && codeparams['code'].length !== \"\") {\n    console.log('Code token: ' + JSON.stringify(codeparams)); //localStorage.setItem('fb_accesstoken', JSON.stringify(codeparams));\n\n    return sendFBCode4Token(codeparams['code']);\n  } //console.log('Stored code: '+localStorage.getItem('fb_code'));\n  //console.log('Params code params: '+codeparams['code']);\n  //if (localStorage) {\n  // localStorage.setItem('fb_code', codeparams['code']);\n  //}\n\n};\nexport const sendFBCode4Token = fbcode => {\n  if (fbcode) {\n    const uri = CONST.FBACCESS_TOKEN_URI;\n    const url = new URL(uri);\n    url.search = new URLSearchParams({\n      client_id: CONST.FBAPP_ID,\n      client_secret: CONST.FBAPP_SEC,\n      redirect_uri: CONST.FBAUTH_REDIRECT_URI,\n      code: fbcode\n    });\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json'\n    };\n    const reqOpts = {\n      method: 'GET' //    headers: headers,\n\n    };\n    const req = new Request(url, reqOpts);\n    return fetch(req).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return {};\n      }\n    }).then(res => {\n      //console.log('Access token: ' + res.constructor.name);\n      if (Object.entries(res).length !== 0 && res.constructor.name === 'Object') {\n        console.log('storing access token' + JSON.stringify(res));\n        localStorage.setItem('fb_accesstoken', JSON.stringify(res));\n      }\n\n      return;\n    });\n  }\n};\nexport const getFBUser = () => {\n  const uri = CONST.FB_USER_EP;\n  console.log('FFBBB: uri : ' + uri);\n  const url = new URL(uri);\n\n  if (localStorage.getItem('fbToken')) {\n    const fbAccessToken = JSON.parse(localStorage.getItem('fbToken')); // console.log('FFBBB: ACCESS TOKEN: ' + JSON.stringify(fbAccessToken));\n\n    if (fbAccessToken.access_token) {\n      url.search = new URLSearchParams({\n        fields: 'id,name,birthday,email',\n        // access_token: 'EAAIojKWrSbABAIpoo85H2ZCKFmvDvsrf2ZCfYDQofHPUbzc8oKZAkGdZA2oEq6j22ZASCNIfqWHPsP9qQU4sYPRZCjbY01sThsQM3yI4lOQAryXKdNfsLZCWGnCBdMRe2lIiDHxaEaTZC0Eib12tht8dVA6QqOa5oI01XRDgsc0FqinGzYanJom2',\n        access_token: fbAccessToken.access_token\n      });\n      const req = new Request(url);\n      return fetch(req).then(res => {\n        //console.log('Res connected: ' + res.ok + res.connected);\n        return res.json();\n      });\n    }\n  } else {\n    return {};\n  }\n}; //********************************************************************** */\n\n/**\n * The following section is code using the javascript library provided by\n * FB.\n */\n\nexport const _fbSignIn = () => {\n  console.log('Welcome!  Fetching your information.... ');\n  FB.login(function (response) {\n    if (response.status === 'connected') {\n      console.log(\"FB Logged in ...\" + JSON.stringify(response));\n    } else {\n      console.log(\"FB Logged in failure...\");\n    }\n  }, {\n    scope: 'public_profile email user_birthday user_location',\n    return_scopes: true\n  });\n};\nexport const testAPI = () => {\n  // Testing Graph API after login.  See statusChangeCallback() for when this call is made.\n  console.log('Welcome!  Fetching your information.... ');\n  FB.api('/me', function (response) {\n    console.log('Successful login for: ' + response.name);\n    document.getElementById('status').innerHTML = 'Thanks for logging in, ' + response.name + '!';\n  });\n};\nexport const statusChangeCallback = response => {\n  // Called with the results from FB.getLoginStatus().\n  console.log('statusChangeCallback');\n  console.log(response); // The current login status of the person.\n\n  if (response.status === 'connected') {\n    // Logged into your webpage and Facebook.\n    testAPI();\n  } else {\n    // Not logged into your webpage or we are unable to tell.\n    document.getElementById('status').innerHTML = 'Please log ' + 'into this webpage.';\n  }\n};\nexport const checkLoginState = () => {\n  // Called when a person is finished with the Login Button.\n  FB.getLoginStatus(function (response) {\n    // See the onlogin handler\n    statusChangeCallback(response);\n  });\n};\nexport const getFBUser1 = () => {\n  FB.api('/me', function (response) {\n    console.log('Successful login for: ' + response.name);\n    document.getElementById('status').innerHTML = 'Thanks for logging in, ' + response.name + '!';\n  });\n};","map":{"version":3,"sources":["/home/azure/spaces/reactapps/agt_basic/src/app/data/auth/fbauth.js"],"names":["CONST","fbSignIn","form","document","createElement","setAttribute","FBAUTH_URI","params","client_id","FBAPP_ID","redirect_uri","FBAUTH_REDIRECT_URI","response_type","scope","state","p","inp","appendChild","body","submit","getFBAccessToken","location","urlFragment","hash","substring","codeparams","regex","m","exec","decodeURIComponent","length","localStorage","setItem","JSON","stringify","getLongLivedFBAccessToken","token","uri","FBACCESS_TOKEN_URI","url","URL","search","URLSearchParams","grant_type","client_secret","fb_exchange_token","headers","Headers","reqOpts","method","req","Request","fetch","getFBAccessTokenFromCode","console","log","sendFBCode4Token","fbcode","FBAPP_SEC","code","then","res","ok","json","Object","entries","constructor","name","getFBUser","FB_USER_EP","getItem","fbAccessToken","parse","access_token","fields","_fbSignIn","FB","login","response","status","return_scopes","testAPI","api","getElementById","innerHTML","statusChangeCallback","checkLoginState","getLoginStatus","getFBUser1"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,cAAlB;;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAE5B,QAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACAF,EAAAA,IAAI,CAACG,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,EAH4B,CAGQ;;AACpCH,EAAAA,IAAI,CAACG,YAAL,CAAkB,QAAlB,EAA4BL,KAAK,CAACM,UAAlC;AACA,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAER,KAAK,CAACS,QADJ;AAEbC,IAAAA,YAAY,EAAEV,KAAK,CAACW,mBAFP;AAGbC,IAAAA,aAAa,EAAE,2BAHF;AAIbC,IAAAA,KAAK,EAAE,kDAJM;AAKbC,IAAAA,KAAK,EAAE;AAAE,cAAQ;AAAV;AALM,GAAf;;AAQA,OAAK,IAAIC,CAAT,IAAcR,MAAd,EAAsB;AACpB,QAAIS,GAAG,GAAGb,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAV;AACAY,IAAAA,GAAG,CAACX,YAAJ,CAAiB,MAAjB,EAAyB,QAAzB;AACAW,IAAAA,GAAG,CAACX,YAAJ,CAAiB,MAAjB,EAAyBU,CAAzB;AACAC,IAAAA,GAAG,CAACX,YAAJ,CAAiB,OAAjB,EAA0BE,MAAM,CAACQ,CAAD,CAAhC;AACAb,IAAAA,IAAI,CAACe,WAAL,CAAiBD,GAAjB;AACD;;AAEDb,EAAAA,QAAQ,CAACe,IAAT,CAAcD,WAAd,CAA0Bf,IAA1B;AACAA,EAAAA,IAAI,CAACiB,MAAL;AAED,CAxBM;AA0BP,OAAO,MAAMC,gBAAgB,GAAIC,QAAD,IAAc;AAE5C;AACA,QAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,SAAd,CAAwB,CAAxB,CAApB;AAGA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,KAAK,GAAG,oBAAd;AAEA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWN,WAAX,CAAX,EAAoC;AAClCG,IAAAA,UAAU,CAACI,kBAAkB,CAACF,CAAC,CAAC,CAAD,CAAF,CAAnB,CAAV,GAAuCE,kBAAkB,CAACF,CAAC,CAAC,CAAD,CAAF,CAAzD;AACD,GAZ2C,CAc5C;;;AACA,MAAIF,UAAU,CAAC,cAAD,CAAV,IACD,OAAOA,UAAU,CAAC,cAAD,CAAjB,KAAsC,WADrC,IAEFA,UAAU,CAAC,cAAD,CAAV,CAA2BK,MAA3B,KAAsC,EAFxC,EAE4C;AAC1C;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAeT,UAAf,CAAvC,EAF0C,CAG1C;;AAGA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGG;AAKF,CA1CM;AA4CP,OAAO,MAAMU,yBAAyB,GAAIC,KAAD,IAAW;AAElD;AACA,QAAMC,GAAG,GAAGrC,KAAK,CAACsC,kBAAlB;AACA,QAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAZ;AACAE,EAAAA,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB;AAC/BC,IAAAA,UAAU,EAAE,mBADmB;AAE/BnC,IAAAA,SAAS,EAAE,iBAFoB;AAG/BoC,IAAAA,aAAa,EAAE,kCAHgB;AAI/BC,IAAAA,iBAAiB,EAAET;AAJY,GAApB,CAAb;AAOA,QAAMU,OAAO,GAAG,IAAIC,OAAJ,CAAY;AAC1B,cAAU,kBADgB;AAE1B,oBAAgB;AAFU,GAAZ,CAAhB;AAMA,QAAMC,OAAO,GAAG;AACdC,IAAAA,MAAM,EAAE,KADM,CAEd;;AAFc,GAAhB;AAKA,QAAMC,GAAG,GAAG,IAAIC,OAAJ,CAAYZ,GAAZ,EAAiBS,OAAjB,CAAZ;AACA,SAAOI,KAAK,CAACF,GAAD,CAAZ;AAED,CA1BM;AA4BP,OAAO,MAAMG,wBAAwB,GAAIhC,QAAD,IAAc;AAEpD;AACA,QAAMC,WAAW,GAAGD,QAAQ,CAACE,IAAT,CAAcC,SAAd,CAAwB,CAAxB,CAApB;AAGA,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,KAAK,GAAG,oBAAd;AAEA,MAAIC,CAAC,GAAG,CAAR;;AACA,SAAOA,CAAC,GAAGD,KAAK,CAACE,IAAN,CAAWN,WAAX,CAAX,EAAoC;AAClCG,IAAAA,UAAU,CAACI,kBAAkB,CAACF,CAAC,CAAC,CAAD,CAAF,CAAnB,CAAV,GAAuCE,kBAAkB,CAACF,CAAC,CAAC,CAAD,CAAF,CAAzD;AACD,GAZmD,CAcpD;;;AACA,MAAIF,UAAU,CAAC,MAAD,CAAV,IACD,OAAOA,UAAU,CAAC,MAAD,CAAjB,KAA8B,WAD7B,IAEFA,UAAU,CAAC,MAAD,CAAV,CAAmBK,MAAnB,KAA8B,EAFhC,EAEoC;AAClCwB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBtB,IAAI,CAACC,SAAL,CAAeT,UAAf,CAA7B,EADkC,CAElC;;AACA,WAAO+B,gBAAgB,CAAC/B,UAAU,CAAC,MAAD,CAAX,CAAvB;AACD,GArBmD,CAwBpD;AACA;AACA;AACA;AACA;;AAED,CA9BM;AAgCP,OAAO,MAAM+B,gBAAgB,GAAIC,MAAD,IAAY;AAE1C,MAAIA,MAAJ,EAAY;AAGV,UAAMpB,GAAG,GAAGrC,KAAK,CAACsC,kBAAlB;AACA,UAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAZ;AACAE,IAAAA,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB;AAC/BlC,MAAAA,SAAS,EAAER,KAAK,CAACS,QADc;AAE/BmC,MAAAA,aAAa,EAAE5C,KAAK,CAAC0D,SAFU;AAG/BhD,MAAAA,YAAY,EAAEV,KAAK,CAACW,mBAHW;AAI/BgD,MAAAA,IAAI,EAAEF;AAJyB,KAApB,CAAb;AAOA,UAAMX,OAAO,GAAG;AACd,sBAAgB,kBADF;AAEd,gBAAU;AAFI,KAAhB;AAKA,UAAME,OAAO,GAAG;AACdC,MAAAA,MAAM,EAAE,KADM,CAEd;;AAFc,KAAhB;AAKA,UAAMC,GAAG,GAAG,IAAIC,OAAJ,CAAYZ,GAAZ,EAAiBS,OAAjB,CAAZ;AAEA,WAAOI,KAAK,CAACF,GAAD,CAAL,CACJU,IADI,CACCC,GAAG,IAAI;AAEX,UAAIA,GAAG,CAACC,EAAR,EAAY;AAEV,eAAOD,GAAG,CAACE,IAAJ,EAAP;AACD,OAHD,MAGO;AACL,eAAO,EAAP;AACD;AACF,KATI,EAUJH,IAVI,CAUCC,GAAG,IAAI;AACX;AAEA,UAAKG,MAAM,CAACC,OAAP,CAAeJ,GAAf,EAAoB/B,MAApB,KAA+B,CAAhC,IAAsC+B,GAAG,CAACK,WAAJ,CAAgBC,IAAhB,KAAyB,QAAnE,EAA6E;AAC3Eb,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBtB,IAAI,CAACC,SAAL,CAAe2B,GAAf,CAArC;AACA9B,QAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB,EAAuCC,IAAI,CAACC,SAAL,CAAe2B,GAAf,CAAvC;AACD;;AAED;AAED,KApBI,CAAP;AAsBD;AAGF,CAnDM;AAqDP,OAAO,MAAMO,SAAS,GAAG,MAAM;AAC7B,QAAM/B,GAAG,GAAGrC,KAAK,CAACqE,UAAlB;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBlB,GAA9B;AACA,QAAME,GAAG,GAAG,IAAIC,GAAJ,CAAQH,GAAR,CAAZ;;AAIA,MAAIN,YAAY,CAACuC,OAAb,CAAqB,SAArB,CAAJ,EAAqC;AACnC,UAAMC,aAAa,GAAGtC,IAAI,CAACuC,KAAL,CAAWzC,YAAY,CAACuC,OAAb,CAAqB,SAArB,CAAX,CAAtB,CADmC,CAEpC;;AAEC,QAAIC,aAAa,CAACE,YAAlB,EAAgC;AAE9BlC,MAAAA,GAAG,CAACE,MAAJ,GAAa,IAAIC,eAAJ,CAAoB;AAC/BgC,QAAAA,MAAM,EAAE,wBADuB;AAEhC;AACCD,QAAAA,YAAY,EAAEF,aAAa,CAACE;AAHG,OAApB,CAAb;AAMA,YAAMvB,GAAG,GAAG,IAAIC,OAAJ,CAAYZ,GAAZ,CAAZ;AAEA,aAAOa,KAAK,CAACF,GAAD,CAAL,CACJU,IADI,CACCC,GAAG,IAAI;AACX;AACA,eAAOA,GAAG,CAACE,IAAJ,EAAP;AACD,OAJI,CAAP;AAMD;AAEF,GAtBD,MAsBM;AACJ,WAAO,EAAP;AACD;AAMF,CArCM,C,CAwCP;;AAGA;AACA;AACA;AACA;;AACA,OAAO,MAAMY,SAAS,GAAG,MAAI;AAC3BrB,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AAEAqB,EAAAA,EAAE,CAACC,KAAH,CAAS,UAASC,QAAT,EAAmB;AAC1B,QAAIA,QAAQ,CAACC,MAAT,KAAoB,WAAxB,EAAqC;AACnCzB,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAoBtB,IAAI,CAACC,SAAL,CAAe4C,QAAf,CAAhC;AAED,KAHD,MAGO;AACLxB,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD;AACF,GAPD,EAOG;AACC1C,IAAAA,KAAK,EAAE,kDADR;AAECmE,IAAAA,aAAa,EAAE;AAFhB,GAPH;AAWD,CAdM;AAgBP,OAAO,MAAMC,OAAO,GAAG,MAAI;AAAuB;AAChD3B,EAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACAqB,EAAAA,EAAE,CAACM,GAAH,CAAO,KAAP,EAAc,UAASJ,QAAT,EAAmB;AAC/BxB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BuB,QAAQ,CAACX,IAAhD;AACAhE,IAAAA,QAAQ,CAACgF,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GACE,4BAA4BN,QAAQ,CAACX,IAArC,GAA4C,GAD9C;AAED,GAJD;AAKD,CAPM;AASP,OAAO,MAAMkB,oBAAoB,GAAIP,QAAD,IAAa;AAAG;AAClDxB,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYuB,QAAZ,EAF+C,CAEN;;AACzC,MAAIA,QAAQ,CAACC,MAAT,KAAoB,WAAxB,EAAqC;AAAI;AACvCE,IAAAA,OAAO;AACR,GAFD,MAEO;AAAkC;AACvC9E,IAAAA,QAAQ,CAACgF,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GAA8C,gBAC5C,oBADF;AAED;AACF,CATM;AAYP,OAAO,MAAME,eAAe,GAAG,MAAI;AAAgB;AACjDV,EAAAA,EAAE,CAACW,cAAH,CAAkB,UAAST,QAAT,EAAmB;AAAI;AACvCO,IAAAA,oBAAoB,CAACP,QAAD,CAApB;AACD,GAFD;AAGD,CAJM;AAMP,OAAO,MAAMU,UAAU,GAAG,MAAI;AAC5BZ,EAAAA,EAAE,CAACM,GAAH,CAAO,KAAP,EAAc,UAASJ,QAAT,EAAmB;AAC/BxB,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAA2BuB,QAAQ,CAACX,IAAhD;AACAhE,IAAAA,QAAQ,CAACgF,cAAT,CAAwB,QAAxB,EAAkCC,SAAlC,GACE,4BAA4BN,QAAQ,CAACX,IAArC,GAA4C,GAD9C;AAED,GAJD;AAKD,CANM","sourcesContent":["import CONST from '../../consts';\nimport axios from 'axios';\n\n\n/**\n * \n * The following code is for logging into fb using http urls and without the \n * provide javascript code by FB.\n * \n */\n\nexport const fbSignIn = () => {\n \n  const form = document.createElement('form');\n  form.setAttribute('method', 'GET'); // Send as a GET request.\n  form.setAttribute('action', CONST.FBAUTH_URI);\n  const params = {\n    client_id: CONST.FBAPP_ID,\n    redirect_uri: CONST.FBAUTH_REDIRECT_URI,\n    response_type: 'code token granted_scopes',\n    scope: 'public_profile email user_birthday user_location',\n    state: { 'name': 'hgillauth' }\n  }\n\n  for (let p in params) {\n    let inp = document.createElement('input')\n    inp.setAttribute('type', 'hidden');\n    inp.setAttribute('name', p);\n    inp.setAttribute('value', params[p]);\n    form.appendChild(inp);\n  }\n\n  document.body.appendChild(form);\n  form.submit();\n\n}\n\nexport const getFBAccessToken = (location) => {\n\n  //const urlFragment = location.search.substring(1);\n  const urlFragment = location.hash.substring(1);\n\n\n  const codeparams = {};\n  const regex = /([^&=]+)=([^&]*)/gm;\n\n  let m = 0;\n  while (m = regex.exec(urlFragment)) {\n    codeparams[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  }\n\n  //console.log('fb code: ' + codeparams['code']);\n  if (codeparams['access_token'] &&\n    (typeof codeparams['access_token'] !== 'undefined') &&\n    codeparams['access_token'].length !== \"\") {\n    //  console.log('Access token: ' + JSON.stringify(codeparams));\n    localStorage.setItem('fb_accesstoken', JSON.stringify(codeparams));\n    //  return sendFBCode4Token(codeparams['code']);\n\n\n    /*  return getLongLivedFBAccessToken(codeparams['access_token'])\n    .then(res=>{\n      if(res.ok){\n        return res.json();       \n      }else{\n        return {}\n      }\n    })\n    .then(res=>{\n      //console.log('RES::'+JSON.stringify(res));\n      localStorage.setItem('fb_accesstoken_long', JSON.stringify(res));\n    });  */\n\n\n  }\n\n\n\n\n}\n\nexport const getLongLivedFBAccessToken = (token) => {\n\n  //const uri = 'https://graph.facebook.com/oauth/access_token';\n  const uri = CONST.FBACCESS_TOKEN_URI;\n  const url = new URL(uri);\n  url.search = new URLSearchParams({\n    grant_type: 'fb_exchange_token',\n    client_id: '607534493419952',\n    client_secret: 'e8e1802f31bea78928b6bbffcaa0368b',\n    fb_exchange_token: token,\n  });\n\n  const headers = new Headers({\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n\n  });\n\n  const reqOpts = {\n    method: 'GET',\n    //   headers:headers\n  }\n\n  const req = new Request(url, reqOpts);\n  return fetch(req)\n\n}\n\nexport const getFBAccessTokenFromCode = (location) => {\n\n  // const urlFragment = location.search.substring(1);\n  const urlFragment = location.hash.substring(1);\n\n\n  const codeparams = {};\n  const regex = /([^&=]+)=([^&]*)/gm;\n\n  let m = 0;\n  while (m = regex.exec(urlFragment)) {\n    codeparams[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  }\n\n  //console.log('fb code: ' + codeparams['code']);\n  if (codeparams['code'] &&\n    (typeof codeparams['code'] !== 'undefined') &&\n    codeparams['code'].length !== \"\") {\n    console.log('Code token: ' + JSON.stringify(codeparams));\n    //localStorage.setItem('fb_accesstoken', JSON.stringify(codeparams));\n    return sendFBCode4Token(codeparams['code']);\n  }\n\n\n  //console.log('Stored code: '+localStorage.getItem('fb_code'));\n  //console.log('Params code params: '+codeparams['code']);\n  //if (localStorage) {\n  // localStorage.setItem('fb_code', codeparams['code']);\n  //}\n\n}\n\nexport const sendFBCode4Token = (fbcode) => {\n\n  if (fbcode) {\n\n\n    const uri = CONST.FBACCESS_TOKEN_URI;\n    const url = new URL(uri);\n    url.search = new URLSearchParams({\n      client_id: CONST.FBAPP_ID,\n      client_secret: CONST.FBAPP_SEC,\n      redirect_uri: CONST.FBAUTH_REDIRECT_URI,\n      code: fbcode,\n    });\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    }\n\n    const reqOpts = {\n      method: 'GET',\n      //    headers: headers,\n\n    }\n    const req = new Request(url, reqOpts);\n\n    return fetch(req)\n      .then(res => {\n\n        if (res.ok) {\n\n          return res.json();\n        } else {\n          return {}\n        }\n      })\n      .then(res => {\n        //console.log('Access token: ' + res.constructor.name);\n\n        if ((Object.entries(res).length !== 0) && res.constructor.name === 'Object') {\n          console.log('storing access token' + JSON.stringify(res));\n          localStorage.setItem('fb_accesstoken', JSON.stringify(res));\n        }\n\n        return;\n\n      });\n\n  }\n\n\n}\n\nexport const getFBUser = () => {\n  const uri = CONST.FB_USER_EP;\n  console.log('FFBBB: uri : ' + uri);\n  const url = new URL(uri);\n  \n  \n\n  if (localStorage.getItem('fbToken')) {\n    const fbAccessToken = JSON.parse(localStorage.getItem('fbToken'));\n   // console.log('FFBBB: ACCESS TOKEN: ' + JSON.stringify(fbAccessToken));\n\n    if (fbAccessToken.access_token) {\n\n      url.search = new URLSearchParams({\n        fields: 'id,name,birthday,email',    \n       // access_token: 'EAAIojKWrSbABAIpoo85H2ZCKFmvDvsrf2ZCfYDQofHPUbzc8oKZAkGdZA2oEq6j22ZASCNIfqWHPsP9qQU4sYPRZCjbY01sThsQM3yI4lOQAryXKdNfsLZCWGnCBdMRe2lIiDHxaEaTZC0Eib12tht8dVA6QqOa5oI01XRDgsc0FqinGzYanJom2',\n        access_token: fbAccessToken.access_token,\n      });\n\n      const req = new Request(url);\n\n      return fetch(req)\n        .then(res => {\n          //console.log('Res connected: ' + res.ok + res.connected);\n          return res.json();\n        });\n\n    } \n\n  }else {\n    return {}\n  }\n\n\n\n\n\n}\n\n\n//********************************************************************** */\n\n\n/**\n * The following section is code using the javascript library provided by\n * FB.\n */\nexport const _fbSignIn = ()=>{                      \n  console.log('Welcome!  Fetching your information.... ');\n  \n  FB.login(function(response) {\n    if (response.status === 'connected') {\n      console.log(\"FB Logged in ...\"+ JSON.stringify(response));\n     \n    } else {\n      console.log(\"FB Logged in failure...\");\n    }\n  }, {\n      scope: 'public_profile email user_birthday user_location',\n      return_scopes: true\n    });\n}\n\nexport const testAPI = ()=>{                      // Testing Graph API after login.  See statusChangeCallback() for when this call is made.\n  console.log('Welcome!  Fetching your information.... ');\n  FB.api('/me', function(response) {\n    console.log('Successful login for: ' + response.name);\n    document.getElementById('status').innerHTML =\n      'Thanks for logging in, ' + response.name + '!';\n  });\n}\n\nexport const statusChangeCallback = (response)=> {  // Called with the results from FB.getLoginStatus().\n  console.log('statusChangeCallback');\n  console.log(response);                   // The current login status of the person.\n  if (response.status === 'connected') {   // Logged into your webpage and Facebook.\n    testAPI();  \n  } else {                                 // Not logged into your webpage or we are unable to tell.\n    document.getElementById('status').innerHTML = 'Please log ' +\n      'into this webpage.';\n  }\n}\n\n\nexport const checkLoginState = ()=>{               // Called when a person is finished with the Login Button.\n  FB.getLoginStatus(function(response) {   // See the onlogin handler\n    statusChangeCallback(response);\n  });\n}\n\nexport const getFBUser1 = ()=>{\n  FB.api('/me', function(response) {\n    console.log('Successful login for: ' + response.name);\n    document.getElementById('status').innerHTML =\n      'Thanks for logging in, ' + response.name + '!';\n  });\n} \n\n\n\n\n"]},"metadata":{},"sourceType":"module"}