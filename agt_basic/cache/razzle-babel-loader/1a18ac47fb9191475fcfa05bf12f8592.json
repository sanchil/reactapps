{"ast":null,"code":"import { useContext, useEffect } from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport verge from 'verge';\nimport { AppContext } from '../state/appcntxt';\nexport var useMediaProp = function useMediaProp(inp) {\n  var theme = useTheme();\n  return useMediaQuery(theme.breakpoints.up(inp));\n};\nexport var useScreen = function useScreen() {\n  return {\n    width: verge.viewport().width,\n    height: verge.viewport().height\n  };\n};\nexport var useElemDim = function useElemDim(elem) {\n  return {\n    clientWidth: elem.clientWidth,\n    clientHeight: elem.clientHeight,\n    scrollWidth: elem.scrollWidth,\n    scrollHeight: elem.scrollHeight\n  };\n};\nexport var useIntersection = function useIntersection(root, target, threshold, handleIntersect) {\n  var options = {\n    root: root,\n    rootMargin: '0px',\n    threshold: threshold || 1.0\n  }; //  let prevRatio = 0;\n\n  /* const handleIntersect = (entries, observer) => {\n      entries.forEach(entry => {\n          if (entry.isIntersecting) {\n              let elem = entry.target;\n                  console.log(\"Current intersecting ratio: \"+entry.intersectionRatio)\n              if (entry.intersectionRatio >= 0.75) {\n                  console.log(\"Current intersecting ratio greater than 0.75\");\n              }\n          }\n      });\n  } */\n\n  var observer = new IntersectionObserver(handleIntersect, options);\n  observer.observe(target);\n};\nexport var useAppContext = function useAppContext() {\n  return useContext(AppContext);\n};\nexport var useScript = function useScript(url, scriptpos, async) {\n  useEffect(function () {\n    var placement = document.querySelector(scriptpos);\n    var script = document.createElement('script');\n    script.src = url;\n    script.async = typeof async === 'undefined' ? true : async;\n    placement.appendChild(script);\n    return function () {\n      placement.removeChild(script);\n    };\n  }, [url]);\n};","map":{"version":3,"sources":["/home/azure/spaces/reactapps/agt_basic/src/app/lib/userhooks.js"],"names":["useContext","useEffect","useMediaQuery","useTheme","verge","AppContext","useMediaProp","inp","theme","breakpoints","up","useScreen","width","viewport","height","useElemDim","elem","clientWidth","clientHeight","scrollWidth","scrollHeight","useIntersection","root","target","threshold","handleIntersect","options","rootMargin","observer","IntersectionObserver","observe","useAppContext","useScript","url","scriptpos","async","placement","document","querySelector","script","createElement","src","appendChild","removeChild"],"mappings":"AAAA,SAA6BA,UAA7B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD,EAAS;AACjC,MAAMC,KAAK,GAAGL,QAAQ,EAAtB;AACA,SAAOD,aAAa,CAACM,KAAK,CAACC,WAAN,CAAkBC,EAAlB,CAAqBH,GAArB,CAAD,CAApB;AACH,CAHM;AAKP,OAAO,IAAMI,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3B,SAAO;AACHC,IAAAA,KAAK,EAAER,KAAK,CAACS,QAAN,GAAiBD,KADrB;AAEHE,IAAAA,MAAM,EAAEV,KAAK,CAACS,QAAN,GAAiBC;AAFtB,GAAP;AAIH,CALM;AAOP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;AAChC,SAAO;AACHC,IAAAA,WAAW,EAAED,IAAI,CAACC,WADf;AAEHC,IAAAA,YAAY,EAAEF,IAAI,CAACE,YAFhB;AAGHC,IAAAA,WAAW,EAAEH,IAAI,CAACG,WAHf;AAIHC,IAAAA,YAAY,EAAEJ,IAAI,CAACI;AAJhB,GAAP;AAOH,CARM;AAUP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,MAAP,EAAeC,SAAf,EAA0BC,eAA1B,EAA8C;AACzE,MAAIC,OAAO,GAAG;AACVJ,IAAAA,IAAI,EAAEA,IADI;AAEVK,IAAAA,UAAU,EAAE,KAFF;AAGVH,IAAAA,SAAS,EAAEA,SAAS,IAAI;AAHd,GAAd,CADyE,CAMzE;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,MAAII,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBJ,eAAzB,EAA0CC,OAA1C,CAAf;AACAE,EAAAA,QAAQ,CAACE,OAAT,CAAiBP,MAAjB;AACH,CAtBM;AAwBP,OAAO,IAAMQ,aAAa,GAAG,SAAhBA,aAAgB;AAAA,SAAM/B,UAAU,CAACK,UAAD,CAAhB;AAAA,CAAtB;AAEP,OAAO,IAAM2B,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAMC,SAAN,EAAiBC,KAAjB,EAA2B;AAChDlC,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMmC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuBJ,SAAvB,CAAlB;AACA,QAAMK,MAAM,GAAGF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAf;AAEAD,IAAAA,MAAM,CAACE,GAAP,GAAaR,GAAb;AACAM,IAAAA,MAAM,CAACJ,KAAP,GAAe,OAAOA,KAAP,KAAiB,WAAjB,GAA+B,IAA/B,GAAsCA,KAArD;AAEAC,IAAAA,SAAS,CAACM,WAAV,CAAsBH,MAAtB;AAEA,WAAO,YAAM;AACTH,MAAAA,SAAS,CAACO,WAAV,CAAsBJ,MAAtB;AACH,KAFD;AAIH,GAbQ,EAaN,CAACN,GAAD,CAbM,CAAT;AAeH,CAhBM","sourcesContent":["import React, { userContext, useContext, useEffect } from 'react';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nimport verge from 'verge';\nimport { AppContext } from '../state/appcntxt';\n\nexport const useMediaProp = (inp) => {\n    const theme = useTheme();\n    return useMediaQuery(theme.breakpoints.up(inp));\n}\n\nexport const useScreen = () => {\n    return {\n        width: verge.viewport().width,\n        height: verge.viewport().height\n    }\n}\n\nexport const useElemDim = (elem) => {\n    return {\n        clientWidth: elem.clientWidth,\n        clientHeight: elem.clientHeight,\n        scrollWidth: elem.scrollWidth,\n        scrollHeight: elem.scrollHeight,\n\n    }\n}\n\nexport const useIntersection = (root, target, threshold, handleIntersect) => {\n    let options = {\n        root: root,\n        rootMargin: '0px',\n        threshold: threshold || 1.0,\n    }\n    //  let prevRatio = 0;\n\n    /* const handleIntersect = (entries, observer) => {\n        entries.forEach(entry => {\n            if (entry.isIntersecting) {\n                let elem = entry.target;\n                    console.log(\"Current intersecting ratio: \"+entry.intersectionRatio)\n                if (entry.intersectionRatio >= 0.75) {\n                    console.log(\"Current intersecting ratio greater than 0.75\");\n                }\n            }\n        });\n    } */\n\n    let observer = new IntersectionObserver(handleIntersect, options);\n    observer.observe(target);\n}\n\nexport const useAppContext = () => useContext(AppContext);\n\nexport const useScript = (url, scriptpos, async) => {\n    useEffect(() => {\n        const placement = document.querySelector(scriptpos);\n        const script = document.createElement('script');\n\n        script.src = url;\n        script.async = typeof async === 'undefined' ? true : async;\n\n        placement.appendChild(script);\n\n        return () => {\n            placement.removeChild(script)\n        }\n\n    }, [url]);\n\n}"]},"metadata":{},"sourceType":"module"}