# https://stackoverflow.com/questions/21297139/how-do-you-sign-a-certificate-signing-request-with-your-certification-authority/21340898#21340898

# create openssl-ca.cnf file with following content between "=========="

=====================================================================


HOME            = .
RANDFILE        = $ENV::HOME/.rnd

####################################################################
[ ca ]
default_ca    = CA_default      # The default ca section

[ CA_default ]

#base_dir      = .
#certificate   = $base_dir/cacert.pem   # The CA certifcate
#private_key   = $base_dir/cakey.pem    # The CA private key
#new_certs_dir = $base_dir              # Location for new certs after signing
#database      = $base_dir/index.txt    # Database index file
#serial        = $base_dir/serial.txt   # The current serial number

#unique_subject = no  # Set to 'no' to allow creation of
                     # several certificates with same subject.

default_days     = 1000         # How long to certify for
default_crl_days = 30           # How long before next CRL
default_md       = sha256       # Use public key default MD
preserve         = no           # Keep passed DN ordering

x509_extensions = ca_extensions # The extensions to add to the cert

email_in_dn     = no            # Don't concat the email in the DN
copy_extensions = copy          # Required to copy SANs from CSR to cert


####################################################################
[ req ]
default_bits       = 4096
default_keyfile    = cakey.pem
distinguished_name = ca_distinguished_name
x509_extensions    = ca_extensions
string_mask        = utf8only

####################################################################
[ ca_distinguished_name ]
countryName         = Country Name (2 letter code)
countryName_default = CA 

stateOrProvinceName         = State or Province Name (full name)
stateOrProvinceName_default = Ontario

localityName                = Locality Name (eg, city)
localityName_default        = Brampton

organizationName            = Organization Name (eg, company)
organizationName_default    = webpapp.org

organizationalUnitName         = Organizational Unit (eg, division)
organizationalUnitName_default = Server Research Department

commonName         = Common Name (e.g. server FQDN or YOUR name)
commonName_default = webapp

emailAddress         = Email Address
emailAddress_default = test@webapp.org

####################################################################
[ ca_extensions ]

subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always, issuer
basicConstraints       = critical, CA:true
keyUsage               = keyCertSign, cRLSign

####################################################################
#[ signing_policy ]
#countryName            = optional
#stateOrProvinceName    = optional
#localityName           = optional
#organizationName       = optional
#organizationalUnitName = optional
#commonName             = supplied
#emailAddress           = optional

####################################################################
#[ signing_req ]
#subjectKeyIdentifier   = hash
#authorityKeyIdentifier = keyid,issuer
#basicConstraints       = CA:FALSE
#keyUsage               = digitalSignature, keyEncipherment



=====================================================================

# execute the following command to generate cacert.pem and cakey.pem files.
# After the command executes, cacert.pem will be your certificate for CA operations, 
# and cakey.pem will be the private key. 
# Recall the private key does not have a password or passphrase.

$ openssl req -x509 -config openssl-ca.cnf -newkey rsa:4096 -sha256 -nodes -out cacert.pem -outform PEM


# For part two, I'm going to create another configuration file that's 
# easily digestible. First, touch the openssl-server.cnf 
#(you can make one of these for user certificates also).

touch openssl-server.cnf

==============================================================
HOME            = .
RANDFILE        = $ENV::HOME/.rnd

####################################################################
[ req ]
default_bits       = 2048
default_keyfile    = serverkey.pem
distinguished_name = server_distinguished_name
req_extensions     = server_req_extensions
string_mask        = utf8only

####################################################################
[ server_distinguished_name ]
countryName         = Country Name (2 letter code)
countryName_default =CA 

stateOrProvinceName         = State or Province Name (full name)
stateOrProvinceName_default = ON

localityName         = Locality Name (eg, city)
localityName_default = Brampton

organizationName            = Organization Name (eg, company)
organizationName_default    = Test Server, Limited

commonName           = Common Name (e.g. server FQDN or YOUR name)
commonName_default   = Test Server

emailAddress         = Email Address
emailAddress_default = test@webapp.org

####################################################################
[ server_req_extensions ]

subjectKeyIdentifier = hash
basicConstraints     = CA:FALSE
keyUsage             = digitalSignature, keyEncipherment
subjectAltName       = @alternate_names
nsComment            = "OpenSSL Generated Certificate"

####################################################################
[ alternate_names ]

DNS.1  = webapp.org

# IPv4 localhost
IP.1     = 127.0.0.1

# IPv6 localhost
IP.2     = ::1
#DNS.2  = www.example.com
#DNS.3  = mail.example.com
#DNS.4  = ftp.example.com


================================================================




# Then, create the server certificate request. Be sure to omit -x509*. 
# Adding -x509 will create a certificate, and not a request.
# After this command executes, you will have a request in servercert.csr 
# and a private key in serverkey.pem.

$ openssl req -config openssl-server.cnf -newkey rsa:2048 -sha256 -nodes -out servercert.csr -outform PEM

# Next, you have to sign it with your CA.
# First, open openssl-ca.cnf and add the following two sections.

####################################################################
[ signing_policy ]
countryName            = optional
stateOrProvinceName    = optional
localityName           = optional
organizationName       = optional
organizationalUnitName = optional
commonName             = supplied
emailAddress           = optional

####################################################################
[ signing_req ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
basicConstraints       = CA:FALSE
keyUsage               = digitalSignature, keyEncipherment


# Second, add the following to the [ CA_default ] section of openssl-ca.cnf. 
# I left them out earlier, because they can complicate things 
#(they were unused at the time). Now you'll see how they are used, 
#so hopefully they will make sense.

base_dir      = .
certificate   = $base_dir/cacert.pem   # The CA certifcate
private_key   = $base_dir/cakey.pem    # The CA private key
new_certs_dir = $base_dir              # Location for new certs after signing
database      = $base_dir/index.txt    # Database index file
serial        = $base_dir/serial.txt   # The current serial number

unique_subject = no  # Set to 'no' to allow creation of
                     # several certificates with same subject.

# Third, touch index.txt and serial.txt:

$ touch index.txt
$ echo '01' > serial.txt
Then, perform the following:

$ openssl ca -config openssl-ca.cnf -policy signing_policy -extensions signing_req -out servercert.pem -infiles servercert.csr