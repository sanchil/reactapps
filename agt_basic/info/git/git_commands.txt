# get ssh key

ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

#Start the ssh-agent in the background.
eval "$(ssh-agent -s)"

#Add your SSH private key to the ssh-agent. 
ssh-add ~/.ssh/id_rsa

# copy the contents of ~/.ssh/id_rsa.pub file and paste it into the 
# github text box in ssh key section under account settings


git remote add origin git@github.com:sanchil/agt1

git add *
git commit -a

git pull origin master
git pull origin master --allow-unrelated-histories

git push -u origin master


echo "# agt1" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/sanchil/agt1.git
git push -u origin master

git remote add origin https://github.com/sanchil/agt1.git
git push -u origin master


# routine

git pull origin master
git add *
git commit -a
git commit -m "first commit"
git push -u origin master


workflows:

#1: push an existing project into a new repo

# add a remote repository location 
git remote add origin https://github.com/sanchil/agt1.git

# initialize an existing git project
git init

# push content to new repository
git push -u origin master

git pull origin master


#2: daily work flow , edit stage commit

git pull --rebase origin master

git status
git add *
git commit -m "comment"

or 

git commit -a *
git push origin master
git pull --rebase origin master 

# other commands

git rebase <branch/tag/commit id>
git reflog

# get a list of all branches
git branch

# create a new branch and switch to into
git checkout -b <branch>

# switch to a branch
git checkout <branch>

# remove from staging

git reset <file>

# Undo Last Git Commit with reset
# https://devconnected.com/how-to-undo-last-git-commit/#:~:text=The%20easiest%20way%20to%20undo,removed%20from%20your%20Git%20history.

$ git reset --soft HEAD~1

#If you are not familiar with this notation, “HEAD~1” means that you want to reset the HEAD 
#(the last commit) to one commit before in the log history.

$ git log --oneline

3fad532  Last commit   (HEAD)
3bnaj03  Commit before HEAD   (HEAD~1)
vcn3ed5  Two commits before HEAD   (HEAD~2)

$ git log --oneline --graph

* b734307 (HEAD -> master) Added a new file named "file1"
* 90f8bb1 Second commit
* 7083e29 Initial repository commit

# to unstage a staged file the ones staged with "git add" command
$ git restore --staged <file>

# Undo Last Commit with revert

In order to revert the last Git commit, use the “git revert” and specify the commit to be reverted which is “HEAD” for the last commit of your history.

$ git revert HEAD

The “git revert” command is slightly different from the “git reset” command because it will record a new commit with the changes introducted by reverting the last commit.

Note also that with “git reset” you specified “HEAD~1” because the reset command sets a new HEAD position while reverting actually reverts the commit specified.

As a consequence, you will have to commit the changes again for the files to be reverted and for the commit to be undone.

As a consequence, let’s say that you have committed a new file to your Git repository but you want to revert this commit.




# check current remote

git remote -v

git branch # check current branches
git branch -r # remtoe branches

# branches

# check where the current git HEAD is pointing to 

$ git log --oneline --decorate
$ git log --oneline --decorate --graph --all

# create a new branch
$ git branch testing

# create a new branch and switch to it
$ git checkout testing

# shorthand create and checkout
$ git checkout -b testing


# workflow: 
# check out hotfix branch work on it 
# and merge it with master branch

$ git checkout -b hotfix
# do some work on hotfix branch

$ git checkout master
$ git merge hotfix

# delete the temp hotfix branch once you are done with it
git branch -d hotfix
